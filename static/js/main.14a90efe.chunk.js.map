{"version":3,"sources":["components/Qr/Qr.js","components/Qr/Qr.jsx","components/Scan/Scan.jsx","components/Home/Home.jsx","components/Register/Register.jsx","components/CheckOut/CheckOut.jsx","components/Qr/SuccessPage.jsx","serviceWorker.js","index.js","App.js"],"names":["users","email","name","Qr","state","result","message","handleScan","data","isMember","QrDB","find","member","setState","console","log","handleError","err","error","delay","onError","this","onScan","style","width","className","to","Component","Scan","Home","Register","for","type","id","required","CheckOut","SuccessPage","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0WAYeA,EAZD,CACV,CACIC,MAAO,wBACPC,KAAM,cAGV,CACID,MAAO,iBACPC,KAAM,mB,OC+CCC,E,2MA3CbC,MAAQ,CACRC,QAAO,EACPC,QAAQ,wB,EAGRC,WAAa,SAAAC,GACX,GAAIA,EAAM,CACX,IAAMC,EAAWC,EAAKC,MAAK,SAAAC,GAAM,OAAEA,EAAOX,QAAQO,KAC9CC,EACH,EAAKI,SAAS,CACbR,OAAQG,IAGT,EAAKK,SAAS,CACbR,QAAO,EAAOC,QAAQ,yBAGxBQ,QAAQC,IAAKN,K,EAIdO,YAAc,SAAAC,GACZH,QAAQI,MAAMD,I,wEAGd,OACE,6BACE,kBAAC,IAAD,CACEE,MAAO,IACPC,QAASC,KAAKL,YACdM,OAAQD,KAAKd,WACbgB,MAAO,CAAEC,MAAO,SAChBC,UAAU,aAEhB,2BACEJ,KAAKjB,MAAME,SAEZe,KAAKjB,MAAMC,OAAS,kBAAC,IAAD,CAAUqB,GAAG,aAAa,Q,GAtClCC,aCNF,SAASC,IACvB,OACC,6BACC,kBAAC,EAAD,O,WCAY,SAASC,IACvB,OACG,6BACE,4BAAQJ,UAAU,cACpB,0CAED,6BAASA,UAAW,YACnB,yBAAKA,UAAU,eACd,kBAAC,IAAD,CAAMC,GAAG,SAAT,2BACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,iBACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,a,MCRU,SAASI,IACvB,OACC,yBAAKL,UAAU,gBACd,yBAAKA,UAAU,YACd,2BAAOM,IAAI,QAAX,UACA,2BAAOC,KAAK,OAAO9B,KAAK,OAAO+B,GAAG,OAAOC,UAAQ,KAElD,yBAAKT,UAAU,YACd,2BAAOM,IAAI,eAAX,yBACA,2BAAOC,KAAK,OAAO9B,KAAK,cAAc+B,GAAG,cAAcC,UAAQ,KAEhE,yBAAKT,UAAU,YACd,2BAAOM,IAAI,OAAX,2BACA,2BAAOC,KAAK,OAAO9B,KAAK,MAAM+B,GAAG,MAAMC,UAAQ,KAEhD,yBAAKT,UAAU,YACd,2BAAOM,IAAI,cAAX,UACA,2BAAOC,KAAK,OAAO9B,KAAK,aAAa+B,GAAG,aAAaC,UAAQ,KAE9D,4BAAQT,UAAU,wBAAuBO,KAAK,UAA9C,cCpBY,SAASG,IACvB,OACC,8B,MCDa,SAASC,IACvB,OACC,yBAAKX,UAAU,WACd,0CACS,kBAAC,IAAD,CAAMC,GAAG,KAAT,WCFQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCSD,WACb,OACE,kBAAC,IAAD,KACE,6BAASlB,UAAU,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,SACV,kBAAChB,EAAD,OAEF,kBAAC,IAAD,CAAOgB,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACT,EAAD,OAEF,kBAAC,IAAD,CAAOS,KAAK,YACV,kBAACR,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,KACV,kBAACf,EAAD,YD3BI,MAASgB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.14a90efe.chunk.js","sourcesContent":["const users = [\r\n    {\r\n        email: \"lauramaya86@gmail.com\",\r\n        name: \"Laura Maya\"\r\n    },\r\n\r\n    {\r\n        email: \"diego@cepac.mx\",\r\n        name: \"Diego López\"\r\n    }\r\n]\r\n\r\nexport default users;\r\n","import React, { Component } from 'react'\r\nimport QrReader from 'react-qr-reader'\r\nimport QrDB from './Qr.js';\r\nimport {\r\n\tBrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n\tLink,\r\n\tRedirect\r\n} from \"react-router-dom\";\r\n\r\nclass Qr extends Component {\r\n  state = {\r\n\t\tresult:false,\r\n\t\tmessage:\"ESCANEA TU CÓDIGO\"\r\n  }\r\n \r\n  handleScan = data => {\r\n    if (data) {\r\n\t\t\tconst isMember = QrDB.find(member=>member.email===data)\r\n\t\t\tif (isMember){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tresult: data\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tresult:false, message:\"USUARIO NO VÁLIDO\"\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tconsole.log (isMember);\r\n      \r\n    }\r\n  }\r\n  handleError = err => {\r\n    console.error(err)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={300}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          style={{ width: '400px' }}\r\n          className=\"QrReader\"\r\n        />\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{this.state.message}\r\n\t\t\t\t</p>\r\n\t\t\t\t{this.state.result ? <Redirect to=\"/success\"/>:\"\"}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Qr;","import React from 'react';\r\nimport Qr from '../Qr/Qr.jsx';\r\n\r\n\r\n\r\nexport default function Scan() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Qr/>\r\n\t\t</div>\r\n  \t);\r\n}","import React from 'react';\r\nimport {\r\n\tBrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n\treturn (\r\n    <div>\r\n      <header className=\"App-header\">\r\n\t\t\t\t<h1>I´M IN</h1>\r\n\t\t\t</header>\r\n\t\t\t<section className= \"App-body\">\r\n\t\t\t\t<nav className=\"menuButtons\">\r\n\t\t\t\t\t<Link to=\"/scan\">SOY MIEMBRO DEL PLANTEL</Link>\r\n\t\t\t\t\t<Link to=\"/register\">SOY VISITANTE</Link>\r\n\t\t\t\t\t<Link to=\"/checkout\">SALIDA</Link>\r\n\t\t\t\t</nav>\r\n\t\t\t</section>\r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './Register.css';\r\nimport {\r\n\tBrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport default function Register() {\r\n\treturn (\r\n\t\t<div className=\"visitorsForm\">\r\n\t\t\t<div className=\"inputRow\">\r\n\t\t\t\t<label for=\"name\">Nombre</label>\r\n\t\t\t\t<input type=\"text\" name=\"name\" id=\"name\" required/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"inputRow\">\r\n\t\t\t\t<label for=\"visitorMail\">Correo Electrónico</label>\r\n\t\t\t\t<input type=\"text\" name=\"visitorMail\" id=\"visitorMail\" required/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"inputRow\">\r\n\t\t\t\t<label for=\"who\">¿A quién visitas?</label>\r\n\t\t\t\t<input type=\"text\" name=\"who\" id=\"who\" required/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"inputRow\">\r\n\t\t\t\t<label for=\"visitAbout\">Asunto</label>\r\n\t\t\t\t<input type=\"text\" name=\"visitAbout\" id=\"visitAbout\" required/>\r\n\t\t\t</div>\r\n\t\t\t<button className=\"buttonRegisterVisitor\"type=\"button\">REGISTRAR</button>\r\n\t\t</div>\r\n  \t);\r\n}","import React from 'react';\r\nimport {\r\n\tBrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport default function CheckOut() {\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t</div>\r\n  \t);\r\n}","import React from 'react';\r\nimport './Qr.css';\r\nimport {\r\n\tBrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport default function SuccessPage() {\r\n\treturn (\r\n\t\t<div className=\"welcome\">\r\n\t\t\t<h1>BIENVENIDO</h1>\r\n            <Link to=\"/\">INICIO</Link>\r\n\t\t</div>\r\n  \t);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport Scan from './components/Scan/Scan.jsx';\nimport Home from './components/Home/Home.jsx';\nimport Register from './components/Register/Register.jsx';\nimport CheckOut from './components/CheckOut/CheckOut.jsx';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport SuccessPage from './components/Qr/SuccessPage';\n\n\nexport default function App() {\n  return (\n    <Router>\n      <section className=\"App-mainPage\">\n        <Switch>\n          <Route path=\"/scan\">\n            <Scan/>\n          </Route>\n          <Route path=\"/register\">\n            <Register/>\n          </Route>\n          <Route path=\"/checkout\">\n            <CheckOut/>\n          </Route>\n          <Route path=\"/success\">\n            <SuccessPage/>\n          </Route>\n          <Route path=\"/\">\n            <Home/>\n          </Route>\n        </Switch>\n      </section>\n    </Router>\n  );\n}\n"],"sourceRoot":""}